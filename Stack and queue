//Stack.h
#pragma once

#include<stdio.h>
#include<assert.h>
#include<stdlib.h>

typedef int STDataType;
typedef struct Stack
{
	STDataType* a;//数据
	int top;//栈顶
	int capacity; //容量
}Stack;

void StackInit(Stack* ps);//初始化栈
void StackPush(Stack* ps, STDataType data);//入栈
void StackPop(Stack* ps);//出栈
STDataType StackTop(Stack* ps);//获取栈顶元素
int StackSize(Stack* ps);//获取栈中有效元素个数
int StackEmpty(Stack* ps);//检测栈是否为空，如果为空返回非零结果，如果不为空返回0
void StackDestroy(Stack* ps);//销毁栈


//Stack.c
#include"Stack.h"


void StackInit(Stack* ps)//初始化栈
{
	assert(ps);
	STDataType* tmp = (STDataType*)malloc(sizeof(STDataType) * 4);
	if (NULL == tmp)
	{
		printf("增容失败\n");
		return;
	}
	else
	{
		ps->a = tmp;
		ps->capacity = 4;
	}
	ps->top = 0;//初始top给0，意味着top指向的是栈顶元素的下一个（初始给-1，top指向的是栈定元素）
}
void StackDestroy(Stack* ps)//销毁栈
{
	assert(ps);
	free(ps->a);
	ps->a = NULL;
	ps->top = 0;
	ps->capacity = 0;
}
void StackPush(Stack* ps, STDataType data)//入栈
{
	assert(ps);
	//满了增容
	if (ps->top == ps->capacity)
	{
		STDataType* tmp = (STDataType*)realloc(ps->a, ps->capacity * 2 * sizeof(STDataType));//每次满了增加二倍的空间
		if (NULL == tmp)
		{
			printf("增容失败\n");
			return;
		}
		else
		{
			ps->a = tmp;
			ps->capacity *= 2;
		}
	}
	ps->a[ps->top] = data;
	ps->top++;
}
void StackPop(Stack* ps)//出栈
{
	assert(ps);
	assert(ps->top > 0);//栈空了，调用StackPop，直接终止，报错。
	ps->top--;
}
STDataType StackTop(Stack* ps)//获取栈顶元素
{
	assert(ps);
	assert(ps->top > 0);//栈空了，调用StackPop，直接终止，报错。
	return ps->a[ps->top - 1];
}
int StackSize(Stack* ps)//获取栈中有效元素个数
{
	assert(ps);
	return ps->top;
}
int StackEmpty(Stack* ps)//检测栈是否为空，如果为空返回非零结果，如果不为空返回0
{
	assert(ps);
	return ps->top;
}



//Queue.h
#pragma once

#include<stdio.h>
#include<assert.h>
#include<stdlib.h>
#include<stdbool.h>

typedef int QDataType;
//链式结构：表示队列
typedef struct QListNode
{
	struct QListNode* next;
	QDataType data;
}QNode;
//队列的结构
typedef struct Queue
{
	QNode* head;
	QNode* tail;
}Queue;

void QueueInit(Queue* pq);//初始化队列
void QueuePush(Queue* pq, QDataType data);//队尾入队列
void QueuePop(Queue* pq);//队头出队列
QDataType QueueFront(Queue* pq);//获取队列头部元素
QDataType QueueBack(Queue* pq);//获取队列队尾元素
int QueueSize(Queue* pq);//获取队列中有效元素个数
bool QueueEmpty(Queue* pq);//检测队列是否为空
void QueueDestroy(Queue* pq);//销毁队列



//Queue,c
#include"Queue.h"


void QueueInit(Queue* pq)//初始化队列
{
	assert(pq);
	pq->head = pq->tail == NULL;
}
void QueueDestroy(Queue* pq)//销毁队列
{
	assert(pq);
	QNode* cur = pq->head;
	while (cur)
	{
		QNode* next = cur->next;//保存下一个节点的地址
		free(cur);
		cur = next;
	}
	pq->head = pq->tail = NULL;
}

void QueuePush(Queue* pq, QDataType data)//队尾入队列
{
	assert(pq);
	QNode* newnode = (QNode*)malloc(sizeof(QNode));
	if (NULL == newnode)
	{
		printf("空间开辟失败\n");
		return;
	}
	newnode->data = data;
	newnode->next = NULL;
	if (NULL == pq->tail)
	{
		pq->head = pq->tail = newnode;
	}
	else
	{
		pq->tail->next = newnode;
		pq->tail = newnode;
	}
}
void QueuePop(Queue* pq)//队头出
{
	assert(pq);
	assert(pq->head);
	//如果只有一个，tail指针访问就是NULL—野指针
	if (NULL == pq->head)
	{
		free(pq->head);
		pq->head = pq->tail = NULL;
	}
	//多个
	else
	{
		QNode* next = pq->head->next;//保存下一个节点的地址
		free(pq->head);
		pq->head = next;
	}
}
QDataType QueueFront(Queue* pq)//获取队列头部元素
{
	assert(pq);
	assert(pq->head);
	return pq->head->data;
}
QDataType QueueBack(Queue* pq)//获取队列队尾元素
{
	assert(pq);
	assert(pq->tail);
	return pq->tail->data;
}
int QueueSize(Queue* pq)//获取队列中有效元素个数
{
	assert(pq);
	int size = 0;
	QNode* cur = pq->head;
	while (cur)
	{
		size++;
		cur = cur->next;
	}
	return size;
}

bool QueueEmpty(Queue* pq)//检测队列是否为空
{
	assert(pq);
	return pq->head == NULL;
}


//Test.c
#include"Stack.h"
#include"Queue.h"

void TestStack()
{
	Stack st;
	StackInit(&st);
	StackPush(&st, 1);
	StackPush(&st, 2);
	StackPush(&st, 3);
	StackPush(&st, 4);
	StackPush(&st, 5);
	//栈不能遍历
	while (StackEmpty(&st) != 0)
	{
		printf("%d ", StackTop(&st));//由栈的性质只能取栈顶的数据
		StackPop(&st);//取一个栈顶的数删除一个才能取下一个
	}

	StackDestroy(&st);
}

void TestQueue()
{
	Queue* q;
	QueueInit(&q);
	QueuePush(&q, 1);
	QueuePush(&q, 2);
	QueuePush(&q, 3);
	QueuePush(&q, 4);
	QueuePush(&q, 5);
	//队列也不能遍历
	while (!QueueEmpty(&q))
	{
		printf("%d ", QueueFront(&q));//由队列的性质只能取对头的数据
		QueuePop(&q);//取一个对头的数据然后删除一个才能取下一个
	}
	printf("\n");

	QueueDestroy(&q);
}

int main()
{
	TestStack();
	TestQueue();

	return 0;
}
