//
#pragma once
#include<stdio.h>
#include<stdlib.h>
#include<assert.h>

typedef int SLTDataType;

typedef struct SListNode
{
	SLTDataType data;//数据
	struct SListNode* next;//节点（下一个结构体类型数据的地址）
}SLTNode;


void SListPrint(SLTNode** pphead);//打印
SLTNode* SListFind(SLTNode** pphead, SLTDataType x);//查找

void SListPushBack(SLTNode** pphead, SLTDataType x);//尾插
void SListPushFront(SLTNode** pphead, SLTDataType x);//头插
void SListPopFront(SLTNode** pphead);//头删
void SListPopBack(SLTNode** pphead);//尾删

void SListInsert(SLTNode** pphead, SLTNode* pos, SLTDataType x);//在pos前面插入x
void SListErase(SLTNode** pphead, SLTNode* pos);//删除pos的值




//SList.c
#include"SList.h"

//打印
void SListPrint(SLTNode** pphead)
{
	SLTNode* cur = *pphead;
	while (cur != NULL)
	{
		printf("%d->", cur->data);//打印数据
		cur = cur->next;//下一个地址（指向下一个数据的地址）
	}
	printf("NULL");
}

//查找
SLTNode* SListFind(SLTNode** pphead, SLTDataType x)
{
	SLTNode* cur = *pphead;
	while (cur)
	{
		if (cur->data == x)
		{
			return cur;
		}
		cur = cur->next;
	}
	return NULL;//没找到返回NULL
}

//开辟空间
SLTNode* BuySListNode(SLTDataType x)
{
	SLTNode* newnode = (SLTNode*)malloc(sizeof(SLTDataType));
	newnode->data = x;
	newnode->next = NULL;
	return newnode;
}

//尾插
void SListPushBack(SLTNode** pphead, SLTDataType x)
{
	SLTNode* newnode = BuySListNode(x);
 
	//判断开始节点是否为NULL
	if (*pphead = NULL)
	{
		*pphead = newnode;
	}
	else
	{
		//找尾节点的指针
		SLTNode* tail = *pphead;
		while (tail->next != NULL)
		{
			tail = tail->next;
		}
		//尾节点，链接新节点（尾节点原本为NULL，尾插：将新开辟的空间的地址newnode给到原本尾节点的NULL）
		tail->next = newnode;
	}
}

//头插
void SListPushFront(SLTNode** pphead, SLTDataType x)
{
	SLTNode* newnode = BuySListNode(x);
	newnode->next = *pphead;
	*pphead = newnode;
}

//头删
void SListPopFront(SLTNode** pphead)
{
	SLTNode* next = (*pphead)->next;//在free前保存节点的地址
	free(*pphead);
	*pphead = next;
}

//尾删
void SListPopBack(SLTNode** pphead)
{
	//1.空
	if (*pphead = NULL)
	{
		return;
	}
	//2.一个节点
	else if ((*pphead)->next = NULL)
	{
		free(*pphead);
		*pphead = NULL;
	}
	//多个节点
	else
	{
		SLTNode* prev = NULL;//记录前一个节点
		SLTNode* tail = *pphead;
		while (tail->next != NULL)
		{
			prev = tail;
			tail = tail->next;
		}
		free(tail);
		prev->next = NULL;//将前一个节点的置为NULL
	}
}


//在pos前面插入x
void SListInsert(SLTNode** pphead, SLTNode* pos, SLTDataType x)
{
	if (pos == *pphead)
	{
		SListPushFront(pphead, x);//如果在第一个节点之前插入就相当于头插
	}
	else
	{
		SLTNode* newnode = BuySListNode(x);
		SLTNode* prev = *pphead;
		while (prev->next != pos)
		{
			prev = prev->next;
		}
		prev->next = newnode;
		newnode->next = pos;
	}
}

//删除pos的值
void SListErase(SLTNode** pphead, SLTNode* pos)
{
	if (pos == *pphead)
	{
		SListPopFront(pphead);//如果删除第一个节点就相当于头删
	}
	else
	{
		SLTNode* prev = *pphead;
		while (prev->next != pos)
		{
			prev = prev->next;
		}
		prev->next = pos->next;
		free(pos);
	}
}




//test.c
#include"SList.h"

void TestSList1()
{
	SLTNode* plist = NULL;
	SListPushBack(&plist, 1);
	SListPushBack(&plist, 2);
	SListPushBack(&plist, 3);
	SListPushBack(&plist, 4);
	SListPushFront(&plist, 0);

	SListPopFront(&plist);
	SListPopBack(&plist);

	//在3前面插入一个30
	SLTNode* pos = SListFind(&plist, 3);
	if (pos)
	{
		SListInsert(&plist, pos, 30);
	}
	
	//删除2
	pos = SListFind(&plist, 2);
	if (pos)
	{
		SListErase(&plist, pos);
	}

	SListPrint(&plist);
}

int main()
{
	TestSList1();
	return 0;
}
