#include<stdio.h>

void PrintArray(int* a, int n)
{
	for (int i = 0; i < n; ++i)
	{
		printf("%d ", a[i]);
	}
	printf("\n");
}
void Swap(int* left, int* right)
{
	int tmp = *left;
	*left = *right;
	*right = tmp;
}

//插入排序(升序)  
void InsertSort(int* a, int n)
{
	for (int i = 0; i < n - 1; ++i)
	{
		//[0, end]有序，end+1位置的值插入进去，让[0, end+1]有序
		int end = i;
		int tmp = a[end + 1];
		while (end >= 0)
		{
			if (a[end] > tmp)
			{
				a[end + 1] = a[end];
				--end;
			}
			else
			{
				break;
			}
		}
		a[end + 1] = tmp;
	}
}
void TestInsertSort()
{
	int a[] = { 3,6,2,7,8,6,1,9,4,0 };
	InsertSort(a, sizeof(a) / sizeof(int));
	PrintArray(a, sizeof(a) / sizeof(int));
}


//希尔排序（直接插入排序的优化）
void ShellSort(int* a, int n)
{
	int gap = n;
	while (gap > 1)
	{
		//必须保证最后一次gap=1  当gap>1都是预排序（接近有序）  gap==1直接插入排序（有序） 
		//gap /= 2;
		gap = gap/3 + 1;
		for (int i = 0; i < n - gap; ++i)
		{
			int end = i;
			int tmp = a[end + gap];
			while (end >= 0)
			{
				if (a[end] > tmp)
				{
					a[end + gap] = a[end];
					end -= gap;
				}
				else
				{
					break;
				}
			}
			a[end + gap] = tmp;
		}
	}
} 
void TestShellSort()
{
	int a[] = { 3,6,2,7,8,6,1,9,4,0 };
	ShellSort(a, sizeof(a) / sizeof(int));
	PrintArray(a, sizeof(a) / sizeof(int));
}


//向下调整算法(前提是左右子树都是小堆)
void AdjustDown(int* a, int n, int root)
{
	int parent = root;
	int child = parent * 2 + 1;//默认是左孩子
	while(child < n)
	{
		//选出左右孩子中小的那一个(大堆的话>)
		if (child + 1 < n && a[child + 1] < a[child])
			child += 1;
		if (a[child] < a[parent])
		{
			//孩子中小的那一个小于父亲就交换
			Swap(&a[child], &a[parent]);
			parent = child;
			child = parent * 2 + 1;
		}
		else
			break;
	}
}
//堆排序
void HeadSort(int* a, int n)
{
	//建堆
	for (int i = (n - 1 - 1) / 2; i >= 0; --i)// (i = (n - 1 - 1) / 2)通过最后一个叶子节点找到他的父亲
	{
		AdjustDown(a, n, i);
	}
	//排降序，建小堆（排升序，建大堆）
	int end = n - 1;
	while (end > 0)
	{
		Swap(&a[0], &a[end]);
		AdjustDown(a, end, 0);
		--end;
	}
}
void TestHeadSort()
{
	int a[] = { 3,6,2,7,8,6,1,9,4,0 };
	HeadSort(a, sizeof(a) / sizeof(int));
	PrintArray(a, sizeof(a) / sizeof(int));
}





//冒泡排序(升序)
void BubbleSort(int* a, int n)
{
	for (int i = 0; i < n; i++)
	{
		int change = 0;
		for (int j = 0; j < n - 1 - i; j++)
		{
			if (a[j] > a[j + 1])
			{
				Swap(&a[j], &a[j + 1]);
				change = 1;
			}
		}
		//已经有序，跳出循环
		if (change == 0)
		{
			break;
		}
	}
}
void TestBubbleSort()
{
	int a[] = { 3,6,2,7,8,6,1,9,4,0 };
	BubbleSort(a, sizeof(a) / sizeof(int)); 
	PrintArray(a, sizeof(a) / sizeof(int));
}



//快速排序（挖坑法）升序
//一次排序
//void QuickSort(int* a, int n)
//{
//	int begin = 0;
//	int end = n - 1;
//	int pivot = begin;//默认坑为开始
//	int key = a[begin];
//	while (begin < end)
//	{
//		//右边找小，放到左边
//		while (begin < end && a[end] >= key)
//		{
//			--end;
//		}
//		a[pivot] = a[end];//小的放到左边的坑里，自己形成新的坑位
//		pivot = end;
//
//		//左边找大，放到右边
//		while (begin < end && a[begin] <= key)
//		{
//			++begin;
//		}
//		a[pivot] = a[begin];//大的放到右边的坑里，自己形成新的坑位
//		pivot = begin;
//	}
//	//相遇了,随便给一个（此处给的是begin）
//	pivot = begin;
//	a[pivot] = key;//最后把基准值放到坑里面
//}
//void TestQuickSort()
//{
//	int a[] = { 3,6,2,7,8,6,1,9,4,0 };
//	QuickSort(a, sizeof(a) / sizeof(int));
//	PrintArray(a, sizeof(a) / sizeof(int));
//}

//void QuickSort(int* a, int left, int right)
//{
//	if (left >= right)
//	{
//		return;
//	}
//	int begin = left;
//	int end = right;
//	int pivot = begin;//默认坑为开始
//	int key = a[begin];
//	while (begin < end)
//	{
//		//右边找小，放到左边
//		while (begin < end && a[end] >= key)
//		{
//			--end;
//		}
//		a[pivot] = a[end];//小的放到左边的坑里，自己形成新的坑位
//		pivot = end;
//
//		//左边找大，放到右边
//		while (begin < end && a[begin] <= key)
//		{
//			++begin;
//		}
//		a[pivot] = a[begin];//大的放到右边的坑里，自己形成新的坑位
//		pivot = begin;
//	}
//	//相遇了,随便给一个（此处给的是begin）
//	pivot = begin;
//	a[pivot] = key;//最后把基准值放到坑里面
//
//	//[left, right]
//	//[left, pivot-1] pivot [pivot+1, right]
//	//左子区间和右子区间有序，总的就有序了。----> 分治递归
//	QuickSort(a, left, pivot - 1);
//	QuickSort(a, pivot + 1, right);
//}


//三数取中
int GetMid(int* a, int left, int right)
{
	int mid = (left + right) >> 1;//除以2
	if (a[left] < a[mid])
	{
		if (a[mid] < a[right])
			return mid;
		else if (a[left] > a[right])
			return left;
		else
			return right;
	}
	else// a[left] > a[mid]
	{
		if (a[mid] > a[right])
			return mid;
		else if (a[left] < a[right])
			return left;
		else
			return right;
	}
}
void QuickSort(int* a, int left, int right)
{
	if (left >= right)
	{
		return;
	}

	int index = GetMid(a, left, right);//拿到中间的数
	Swap(&a[left], &a[index]);//和最左边的数交换后，下边的key值还是在最左边

	int begin = left;
	int end = right;
	int pivot = begin;//默认坑为开始
	int key = a[begin];
	while (begin < end)
	{
		//右边找小，放到左边
		while (begin < end && a[end] >= key)
		{
			--end;
		}
		a[pivot] = a[end];//小的放到左边的坑里，自己形成新的坑位
		pivot = end;

		//左边找大，放到右边
		while (begin < end && a[begin] <= key)
		{
			++begin;
		}
		a[pivot] = a[begin];//大的放到右边的坑里，自己形成新的坑位
		pivot = begin;
	}
	//相遇了,随便给一个（此处给的是begin）
	pivot = begin;
	a[pivot] = key;//最后把基准值放到坑里面

	//[left, right]
	//[left, pivot-1] pivot [pivot+1, right]
	//左子区间和右子区间有序，总的就有序了。----> 分治递归

	//小区间优化，快速排序最后几层递归太多，可以直接用入排序排好最后几层 （数据过多可以提高效率）
	if (pivot - 1 - left > 10)
		QuickSort(a, left, pivot - 1);
	else
		InsertSort(a + left, pivot - 1 - left + 1);
	if(right - (pivot + 1) > 10)
		QuickSort(a, pivot + 1, right);
	else
		InsertSort(a + pivot + 1, right - (pivot + 1) + 1);
}
void TestQuickSort()
{
	int a[] = { 3,6,2,7,8,6,1,9,4,0 };
	QuickSort(a, 0, sizeof(a) / sizeof(int) - 1);
	PrintArray(a, sizeof(a) / sizeof(int));
}




//挖坑法（单趟排序）
int PartSort1(int* a, int left, int right)
{
	int index = GetMid(a, left, right);//拿到中间的数
	Swap(&a[left], &a[index]);//和最左边的数交换后，下边的key值还是在最左边

	int begin = left;
	int end = right;
	int pivot = begin;//默认坑为开始
	int key = a[begin];
	while (begin < end)
	{
		//右边找小，放到左边
		while (begin < end && a[end] >= key)
		{
			--end;
		}
		a[pivot] = a[end];//小的放到左边的坑里，自己形成新的坑位
		pivot = end;

		//左边找大，放到右边
		while (begin < end && a[begin] <= key)
		{
			++begin;
		}
		a[pivot] = a[begin];//大的放到右边的坑里，自己形成新的坑位
		pivot = begin;
	}
	//相遇了,随便给一个（此处给的是begin）
	pivot = begin;
	a[pivot] = key;//最后把基准值放到坑里面
	return pivot;
}
//左右指针法(单趟排序)
int PartSort2(int* a, int left, int right)
{
	int index = GetMid(a, left, right);//拿到中间的数
	Swap(&a[left], &a[index]);//和最左边的数交换后，下边的key值还是在最左边

	int begin = left;
	int end = right;
	int key = begin;
	while (begin < end)
	{
		//右边找小
		while (begin < end && a[end] >= a[key])
			--end;
		//左边找大
		while (begin < end && a[begin] <= a[key])
			++begin;
		Swap(&a[begin], &a[end]);//找到的大小交换
	}
	Swap(&a[begin], &a[key]);//把基准值放到相遇的位置
	return begin;
}
//前后指针法（单趟排序）
int PartSort3(int* a, int left, int right)
{
	int index = GetMid(a, left, right);//拿到中间的数
	Swap(&a[left], &a[index]);//和最左边的数交换后，下边的key值还是在最左边

	int key = left;
	int prev = left;
	int cur = left + 1;
	while (cur <= right)
	{
		if (a[cur] < a[key] && ++prev != cur)//前指针找小于基准值
			Swap(&a[cur], &a[prev]);
		++cur;
	}
	Swap(&a[key], &a[prev]);
	return prev;
}
void QuickSort(int* a, int left, int right)
{
	if (left >= right)
		return;

	//int keyIndex = PartSort1(a, left, right);
	//int keyIndex = PartSort2(a, left, right);
	int keyIndex = PartSort3(a, left, right);

	//[left, right]
	//[left, keyIndex-1] keyIndex [keyIndex+1, right]
	//左子区间和右子区间有序，总的就有序了。----> 分治递归

	//快速排序最后几层递归太多，可以直接用入排序排好最后几层 （数据过多可以提高效率）
	if (keyIndex - 1 - left > 10)
		QuickSort(a, left, keyIndex - 1);
	else
		InsertSort(a + left, keyIndex - 1 - left + 1);
	if (right - (keyIndex + 1) > 10)
		QuickSort(a, keyIndex + 1, right);
	else
		InsertSort(a + keyIndex + 1, right - (keyIndex + 1) + 1);
}
void TestQuickSort()
{
	int a[] = { 3,6,2,7,8,6,1,9,4,0 };
	QuickSort(a, 0, sizeof(a) / sizeof(int) - 1);
	PrintArray(a, sizeof(a) / sizeof(int));
}




//归并排序
void _MergeSort(int* a, int left, int right, int* tmp)
{
	if (left >= right)
		return;

	int mid = (left + right) >> 1;
	//假设 [left, mid] [mid+1, right] 有序， 就可以归并了
	_MergeSort(a, left, mid, tmp);
	_MergeSort(a, mid + 1, right, tmp);

	//归并
	int begin1 = left, end1 = mid;
	int begin2 = mid + 1, end2 = right;
	int index = left;
	while (begin1 <= end1 && begin2 <= end2)
	{
		if (a[begin1] < a[begin2])
		{
			tmp[index] = a[begin1];
			index++;
			begin1++;
		}
		else
		{
			tmp[index] = a[begin2];
			index++;
			begin2++;
		}
	}
	while (begin1 <= end1)
	{
		tmp[index++] = a[begin1++];
	}
	while (begin2 <= end2)
	{
		tmp[index++] = a[begin2++];
	}
	//拷贝到原来数组
	for (int i = left; i <= right; ++i)
	{
		a[i] = tmp[i];
	}
}
void MergeSort(int* a, int n)
{
	int* tmp = (int*)malloc(sizeof(int) * n);
	_MergeSort(a, 0, n - 1, tmp);

	free(tmp);
}
void TestMergeSort()
{
	int a[] = { 10, 6, 7, 1, 3, 9, 4, 2, 6, 8, 10 };
	MergeSort(a, sizeof(a) / sizeof(int));
	PrintArray(a, sizeof(a) / sizeof(int));
}


//计数排序
void CountSort(int* a, int n)
{
	int max = a[0], min = a[0];
	//求最大值和最小值
	for (int i = 0; i < n; ++i)
	{
		if (a[i] > max)
			max = a[i];
		if (a[i] < min)
			min = a[i];
	}
	int range = max - min + 1;//待排序序列个数
	int* count = (int*)malloc(sizeof(int) * range);
	if (NULL == count)
	{
		printf("malloc fail !\n");
		return;
	}
	memset(count, 0, sizeof(int) * range);//初始化
	//统计次数
	for (int i = 0; i < n; ++i)
	{
		count[a[i] - min]++;
	}
	int j = 0;
	for (int i = 0; i < range; ++i)
	{
		while (count[i]--)
		{
			a[j + 1] = i + min;
		}
	}
	free(count);
	count = NULL;
}
void TestCountSort()
{
	int a[] = { 10, 6, 7, 1, 3, 9, 4, 2 };
	CountSort(a, sizeof(a) / sizeof(int));
	PrintArray(a, sizeof(a) / sizeof(int));
}




int main()
{
	TestInsertSort();
	TestShellSort();
	TestHeadSort();
	TestSelectSort();
	TestBubbleSort();
	TestQuickSort();
	TestMergeSort();
	TestCountSort();
	return;
}
